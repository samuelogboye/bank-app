# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]


    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: bank-app

    - name: Check repository name
      run: echo "Repository name:${{ env.GITHUB_REPOSITORY }}"
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "No requirements.txt found. Skipping installation."; fi    

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        if [ -n "$(find . -type f -name 'test_*.py')" ]; then
          pytest
        else
          echo "No test files found. Skipping pytest."
        fi


    - name: Save Test Report as Artifact
      if: always()  # Ensure this step runs even if previous steps failed
      uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: pytest_report.xml

    - name: Save Coverage Report as Artifact
      if: always()  # Ensure this step runs even if previous steps failed
      run: |
        # Run pytest with coverage and generate XML report
        pytest --cov-report xml:coverage_report.xml --cov=.
      continue-on-error: true
      
    - name: Upload Coverage Report
      if: always()  # Ensure this step runs even if previous steps failed
      uses: actions/upload-artifact@v2
      with:
        name: coverage-reports
        path: coverage_report.xml


    
  analyze_reports:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download Test Report Artifact
      uses: actions/download-artifact@v2
      with:
        name: test-reports
        path: test-reports

    - name: Download Coverage Report Artifact
      uses: actions/download-artifact@v2
      with:
        name: coverage-reports
        path: coverage-reports
